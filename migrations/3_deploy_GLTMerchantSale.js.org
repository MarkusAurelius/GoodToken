//App.web3Provider = new Web3.providers.HttpProvider('http://localhost:8545');
//web3 = new Web3(App.web3Provider);

const Web3 = require('web3');
var BigNumber = require('bignumber.js');
const web3Provider = new Web3.providers.HttpProvider('http://localhost:8545');

//const web3 = new Web3('ws://localhost:8546');
const web3 = new Web3(web3Provider);
var GLTMerchantSale = artifacts.require("./GLTMerchantSale.sol");

var GoodLifeToken = artifacts.require("./GoodLifeToken.sol");

module.exports = function(deployer, network, accounts) 
{
    const ethRate = new BigNumber(50000000000000); //1 EUR Cent
    const wallet = accounts[0];
    return deployer
        .then(() => {
            return deployer.deploy(
                GLTMerchantSale,
                ethRate,
                wallet,
                GoodLifeToken.address
            );
        }).then(() => {
                async (deployer) => {
                //await deployer.deploy(GoodLifeToken);
                //goodLifeTokenInstance = await GoodLifeToken.deployed();
                //await goodLifeTokenInstance.transferOwnership(GoodLifeToken.address);
                GoodLifeToken.transferOwnership(GoodLifeToken.address);
            };
            
            //var token = GoodLifeToken.at(GoodLifeToken.address);

            //token.transferOwnership(GLTMerchantSale.address);
            /*async (GoodLifeToken, GLTMerchantSale) => {
            await deployer.deploy(GoodLifeToken);
            goodLifeTokenInstance = await GoodLifeToken.deployed();
            await deployer.deploy(GLTMerchantSale, ethRate, wallet, GoodLifeToken.address);
            gltMerchantSaleInstance = GLTMerchantSale.deployed();
            await goodLifeTokenInstance.addMinter(gltMerchantSaleInstance.address);
            };
            /*async (GoodLifeToken) => {
            goodLifeTokenInstance = await GoodLifeToken.deploy();
            gltMerchantSaleInstance = await deployer.deploy(GLTMerchantSale, ethRate, wallet, GoodLifeToken.address)
            goodLifeTokenInstance.addMinter(gltMerchantSaleInstance);*/
            /*async (GLTMerchantSale) => {
            gltMerchantSaleInstance = await deployer.deploy(GLTMerchantSale, ethRate, wallet, GoodLifeToken.address);
            goodLifeTokenInstance = await GoodLifeToken.deployed();
            await gltMerchantSaleInstance.transferOwnership(goodLifeTokenInstance);
            };*/
            // TODO: transfer ownerhship of the token to the crowdsale for minting
            // Currently doing that in the UI
            //}

        });
    
}